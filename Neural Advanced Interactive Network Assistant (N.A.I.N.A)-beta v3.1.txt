import speech_recognition as sr
import pyttsx3
import wikipedia
import requests
import pygame
from googletrans import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import webbrowser
import pyowm
import json

# Initialize the speech engine
engine = pyttsx3.init()

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        print("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        print("Sorry, my speech service is down.")
        return None

# Initialize pygame mixer for music control
pygame.mixer.init()

# Initialize translator
translator = Translator()

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API
owm = pyowm.OWM('your_openweather_api_key')  # Replace with your OpenWeatherMap API key

# List of predefined jokes
jokes = [
    "Why don't scientists trust atoms? Because they make up everything!",
    "What do you get if you cross a cat with a dark horse? Kitty Perry.",
    "Why don't some couples go to the gym? Because some relationships don't work out.",
    "I told my wife she was drawing her eyebrows too high. She looked surprised."
]

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        return random.choice(jokes)

# Function to play music from a YouTube URL
def play_music(url):
    webbrowser.open(url)
    speak("Playing music from YouTube.")

# Function to control music playback
def control_music(action):
    if action == "pause":
        pygame.mixer.music.pause()
        speak("Music paused.")
    elif action == "resume":
        pygame.mixer.music.unpause()
        speak("Music resumed.")
    elif action == "stop":
        pygame.mixer.music.stop()
        speak("Music stopped.")
    elif action == "next":
        # Assuming you have a playlist and this skips to the next song
        # You need to implement your playlist logic here
        speak("Skipping to the next song.")
    elif action == "previous":
        # Assuming you have a playlist and this goes back to the previous song
        # You need to implement your playlist logic here
        speak("Going back to the previous song.")
    else:
        speak("Invalid action.")

# Main function to process commands
def process_command(command):
    if "play music" in command:
        speak("Please provide the URL of the music.")
        url = listen()
        play_music(url)
    elif "pause music" in command:
        control_music("pause")
    elif "resume music" in command:
        control_music("resume")
    elif "stop music" in command:
        control_music("stop")
    elif "next song" in command:
        control_music("next")
    elif "previous song" in command:
        control_music("previous")
    elif "tell me a joke" in command:
        joke = fetch_joke()
        speak(joke)
    elif "what is" in command or "who is" in command:
        topic = command.replace("what is", "").replace("who is", "").strip()
        summary = wikipedia.summary(topic, sentences=2)
        speak(summary)
    elif "translate" in command:
        speak("Please tell me the sentence you want to translate.")
        sentence = listen()
        speak("Which language do you want to translate to?")
        dest_lang = listen()
        translation = translator.translate(sentence, dest=dest_lang).text
        speak(f"The translation is: {translation}")
    elif "currency rate" in command:
        speak("Please provide the base currency.")
        base = listen()
        speak("Please provide the target currency.")
        target = listen()
        rate = currency_converter.get_rate(base.upper(), target.upper())
        speak(f"The exchange rate from {base} to {target} is {rate}.")
    elif "bitcoin price" in command:
        price = btc_converter.get_latest_price('USD')
        speak(f"The current price of Bitcoin is {price} USD.")
    elif "weather" in command:
        speak("Please provide the city name.")
        city = listen()
        weather = owm.weather_at_place(city).get_weather()
        temperature = weather.get_temperature('celsius')['temp']
        status = weather.get_status()
        speak(f"The current temperature in {city} is {temperature} degrees Celsius with {status}.")
    elif "open" in command:
        if "youtube" in command:
            webbrowser.open("https://www.youtube.com")
            speak("Opening YouTube.")
        elif "google" in command:
            webbrowser.open("https://www.google.com")
            speak("Opening Google.")
    else:
        speak("Sorry, I didn't understand that command.")

# Run the assistant
if __name__ == "__main__":
    while True:
        speak("How can I assist you?")
        command = listen()
        if command:
            process_command(command)
        if "exit" in command or "bye" in command or "quit" in command:
            speak("Goodbye!")
            break