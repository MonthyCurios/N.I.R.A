import speech_recognition as sr
import pyttsx3
import wikipedia
import webbrowser

# Initialize text-to-speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Speed of speech
engine.setProperty('volume', 0.9)  # Volume level (0.0 to 1.0)

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("N.A.I.NA is listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        print("N.A.I.NA is recognizing...")
        query = recognizer.recognize_google(audio, language='en-US')
        print(f"You said: {query}")
    except Exception as e:
        print("Sorry, N.A.I.NA didn't catch that.")
        return None
    return query

def speak(text):
    engine.say(text)
    engine.runAndWait()

def search_wikipedia(query):
    speak("Searching Wikipedia...")
    try:
        summary = wikipedia.summary(query, sentences=2)
        speak("According to Wikipedia")
        speak(summary)
    except wikipedia.exceptions.DisambiguationError as e:
        speak("There are multiple matches. Please specify your query.")

def search_online(query):
    url = f"https://www.google.com/search?q={query}"
    speak("Searching online...")
    webbrowser.open(url)

def process_command(command):
    if 'search' in command.lower():
        # Perform Wikipedia search
        search_query = command.replace("search", "").strip()
        search_wikipedia(search_query)
    elif 'hello' in command.lower():
        # Greet the user
        speak("Hello! How can N.A.I.NA assist you?")
    elif 'goodbye' in command.lower():
        # Say goodbye
        speak("Goodbye! Have a nice day!")
        return False
    else:
        # Search online if no specific command detected
        search_online(command)
    return True

def main():
    speak("Initializing Neural Advanced Interactive Network Assistant.")
    active = True
    while active:
        command = listen()
        if command:
            active = process_command(command)

if __name__ == "__main__":
    main()