import nltk
import os
import speech_recognition as sr
import pyttsx3
import requests
from translate import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import webbrowser
import pyowm
import datetime
import smtplib
from email.message import EmailMessage
import subprocess
import tkinter as tk
from tkinter import scrolledtext, Canvas
from threading import Thread
from time import sleep

# Set NLTK data path
nltk_data_path = os.path.join(os.path.expanduser("~"), "nltk_data")
nltk.data.path.append(nltk_data_path)

# Manually download required NLTK data
required_nltk_packages = ['averaged_perceptron_tagger', 'punkt', 'stopwords']
for package in required_nltk_packages:
    try:
        nltk.data.find(package)
    except LookupError:
        nltk.download(package, download_dir=nltk_data_path)

from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Initialize the speech engine
engine = pyttsx3.init()

# Set voice to female
def set_voice():
    voices = engine.getProperty('voices')
    for voice in voices:
        if 'female' in voice.name.lower():
            engine.setProperty('voice', voice.id)
            return
    engine.setProperty('voice', 'english+f1')  # Default female voice
    print("There seems to have been a problem with the voice synthesizer. Default settings have been restored.")

set_voice()

# Function to speak
def speak(text):
    try:
        engine.say(text)
        engine.runAndWait()
    except RuntimeError:
        pass  # Skip if run loop is already running

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return None
    except Exception as e:
        speak(f"An error occurred: {e}")
        return None

# Initialize translator
translator = Translator(to_lang='en')

# Function to translate text
def translate_text(text, dest_lang):
    try:
        translation = translator.translate(text, dest=dest_lang)
        return translation
    except Exception as e:
        return f"Translation failed: {e}"

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API with your API key
owm = pyowm.OWM('Your API')  # Replace with your OpenWeatherMap API key

# Function to fetch weather information
def get_weather(city_name):
    try:
        observation = owm.weather_manager().weather_at_place(city_name)
        weather = observation.weather
        temperature = weather.temperature('celsius')['temp']
        status = weather.detailed_status
        return f"{city_name}: {temperature}Â°C, {status}"
    except Exception as e:
        return f"Could not get weather information. {e}"

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        jokes = [
            "Why don't scientists trust atoms? Because they make up everything!",
            "What do you get if you cross a cat with a dark horse? Kitty Perry.",
            "Why don't some couples go to the gym? Because some relationships don't work out.",
            "I told my wife she was drawing her eyebrows too high. She looked surprised."
        ]
        return random.choice(jokes)

# Function to play music from a YouTube URL
def play_music(url):
    webbrowser.open(url)
    speak("Playing music.")

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if hour < 12:
        speak("Good morning, Sir!")
    elif hour < 18:
        speak("Good afternoon, Sir!")
    else:
        speak("Good evening, Sir!")
    now = datetime.datetime.now()
    speak(f"Today is {now.strftime('%A, %B %d, %Y')}, and the time is {now.strftime('%I:%M %p')}.")

# Function to send an email
def send_email():
    try:
        speak("Who is the recipient?")
        recipient = listen()
        speak("What is the subject?")
        subject = listen()
        speak("What is the message?")
        message_content = listen()

        msg = EmailMessage()
        msg.set_content(message_content)
        msg['Subject'] = subject
        msg['From'] = 'reeddplayz@gmail.com'  # Replace with your email
        msg['To'] = recipient

        with smtplib.SMTP('smtp.example.com', 587) as server:  # Replace with your SMTP server and port
            server.starttls()
            server.login('your_email@example.com', 'your_password')  # Replace with your login credentials
            server.send_message(msg)

        speak("Email sent.")
    except Exception as e:
        speak(f"Could not send the email. {e}")

# Function to search for a file or application and open it
def search_and_open(query):
    for root, dirs, files in os.walk("C:\\"):  # Adjust the search path as needed
        for name in files:
            if query in name.lower():
                os.startfile(os.path.join(root, name))
                speak(f"Opening {name}")
                return
        for name in dirs:
            if query in name.lower():
                os.startfile(os.path.join(root, name))
                speak(f"Opening {name}")
                return
    speak("Could not find that file or application.")

# Function to search and provide an answer
def search_and_provide_answer(query):
    try:
        # Set up Google Custom Search API
        api_key = "UR API"
        search_engine_id = "YOUR API"
        search_url = f"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={search_engine_id}&q={query}"

        # Make request to the API
        response = requests.get(search_url)
        data = response.json()

        # Parse the response
        if "items" in data:
            items = data["items"]
            if items:
                # Get the first relevant snippet
                snippet = items[0]["snippet"]
                speak(snippet)
                return snippet
            else:
                speak("No relevant information found.")
                return "No relevant information found."
        else:
            speak("Error occurred while searching.")
            return "Error occurred while searching."
    except Exception as e:
        speak(f"Error occurred while searching. {e}")
        return f"Error occurred while searching. {e}"

# Function to classify sentence as command or question
def classify_sentence(sentence):
    tokens = word_tokenize(sentence)
    words = [word for word in tokens if word.isalnum()]
    stop_words = set(stopwords.words('english'))
    words = [word for word in words if word.lower() not in stop_words]
    tagged_words = nltk.pos_tag(words)
    question_words = ['WDT', 'WP', 'WP$', 'WRB']
    for word, tag in tagged_words:
        if tag in question_words:
            return "question"
    return "command"

def parse_and_execute_command(command):
    # Standardize the command to lower case
    command = command.lower()

    # Lists of phrases to match against
    compliments = ["you are beautiful", "you are smart", "you are awesome", "you're beautiful"]
    thanks = ["thanks", "thank you", "thank"]
    goodbye = ["goodbye", "bye", "exit"]  # Include "bye" and "exit" for farewell commands
    
    classification = classify_sentence(command)
    if classification == "question":
        return search_and_provide_answer(command)
    
    if any(compliment in command for compliment in compliments):
        response = "Thank you!"
        speak(response)
        return response
    elif any(thank in command for thank in thanks):
        response = "You're welcome."
        speak(response)
        return response
    elif any(exit_command in command for exit_command in goodbye):
        response = "Goodbye and take care, if you need anything feel free to ask!"
        speak(response)
        exit()
        return response
    elif "what is your name" in command or "who are you" in command:
        response = "I am your personal assistant."
        speak(response)
        return response
    elif "calculate" in command:
        try:
            # Extract the mathematical expression
            expression = command.split("calculate")[1].strip()
            # Evaluate the expression
            result = eval(expression)
            response = f"The result of {expression} is {result}"
            speak(response)
            return response
        except Exception as e:
            response = "Sorry, I couldn't calculate that."
            speak(response)
            return response
    elif "translate" in command:
        try:
            words_to_translate = command.split("translate")[1].strip()
            translated_words = translate_text(words_to_translate, "en")
            response = f"The translation is: {translated_words}"
            speak(response)
            return response
        except Exception as e:
            response = f"Sorry, I couldn't translate that. {e}"
            speak(response)
            return response
    elif "weather" in command:
        try:
            city_name = command.split("weather")[1].strip()
            weather_info = get_weather(city_name)
            speak(weather_info)
            return weather_info
        except Exception as e:
            response = f"Sorry, I couldn't get the weather information. {e}"
            speak(response)
            return response
    elif "joke" in command:
        joke = fetch_joke()
        speak(joke)
        return joke
    elif "play music" in command:
        try:
            url = command.split("play music")[1].strip()
            play_music(url)
            return "Playing music."
        except Exception as e:
            response = f"Sorry, I couldn't play music. {e}"
            speak(response)
            return response
    elif "send email" in command:
        send_email()
        return "Email sent."
    elif "search for" in command:
        query = command.split("search for")[1].strip()
        search_and_open(query)
        return f"Searching for {query}."
    else:
        return "Sorry, I didn't understand that command."


class VoiceAssistantGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Assistant")
        self.root.geometry("800x600")
        self.root.configure(bg='#1c1c1c')

        self.conversation = scrolledtext.ScrolledText(root, wrap=tk.WORD, state='disabled', height=20, width=80, bg='#f0f0f0', fg='#000000', font=('Helvetica', 12))
        self.conversation.pack(pady=20)

        self.canvas = Canvas(root, width=100, height=100, bg='#1c1c1c', highlightthickness=0)
        self.canvas.pack(pady=20)
        self.circle = self.canvas.create_oval(10, 10, 90, 90, fill='#3498db')

        self.listen_button = tk.Button(root, text="Listen", command=self.listen_and_respond, bg='#3498db', fg='#ffffff', font=('Helvetica', 12), padx=20, pady=10)
        self.listen_button.pack(pady=20)

        self.animate_blob()

    def animate_blob(self):
        def grow_and_shrink():
            while True:
                for i in range(10, 31, 1):
                    self.canvas.coords(self.circle, 50-i, 50-i, 50+i, 50+i)
                    sleep(0.05)
                for i in range(30, 9, -1):
                    self.canvas.coords(self.circle, 50-i, 50-i, 50+i, 50+i)
                    sleep(0.05)
        Thread(target=grow_and_shrink, daemon=True).start()

    def update_conversation(self, text, user=True):
        self.conversation.config(state='normal')
        if user:
            self.conversation.insert(tk.END, f"You: {text}\n", 'user')
            self.conversation.tag_config('user', foreground='green')
        else:
            self.conversation.insert(tk.END, f"Bot: {text}\n", 'bot')
            self.conversation.tag_config('bot', foreground='blue')
        self.conversation.config(state='disabled')
        self.conversation.yview(tk.END)

    def listen_and_respond(self):
        command = listen()
        if command:
            self.update_conversation(command, user=True)
            response = parse_and_execute_command(command)
            self.update_conversation(response, user=False)

# Initialize the GUI
root = tk.Tk()
app = VoiceAssistantGUI(root)

# Greet the user
Thread(target=greet_user).start()

# Run the main loop
root.mainloop()
