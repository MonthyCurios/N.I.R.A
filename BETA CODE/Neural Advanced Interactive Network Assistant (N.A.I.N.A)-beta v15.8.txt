import tkinter as tk
from tkinter import scrolledtext, Canvas, Text
from threading import Thread
import pyttsx3
import speech_recognition as sr
import datetime
import os
import webbrowser
import smtplib
from email.message import EmailMessage
import requests
from translate import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import pyowm
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# Initialize the speech engine
engine = pyttsx3.init()

# Set voice to female
def set_voice():
    voices = engine.getProperty('voices')
    for voice in voices:
        if 'female' in voice.name.lower():
            engine.setProperty('voice', voice.id)
            return
    engine.setProperty('voice', 'english+f1')  # Default female voice
    print("There seems to have been a problem with the voice synthesizer. Default settings have been restored.")

set_voice()

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return None
    except Exception as e:
        speak(f"An error occurred: {e}")
        return None

# Initialize translator
translator = Translator(to_lang='en')

# Function to translate text
def translate_text(text, dest_lang):
    try:
        translation = translator.translate(text, dest=dest_lang)
        return translation
    except Exception as e:
        return f"Translation failed: {e}"

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API with your API key
owm = pyowm.OWM('UR API')  # Replace with your OpenWeatherMap API key

# Function to fetch weather information
def get_weather(city_name):
    try:
        observation = owm.weather_manager().weather_at_place(city_name)
        weather = observation.weather
        temperature = weather.temperature('celsius')['temp']
        status = weather.detailed_status
        return f"{city_name}: {temperature}Â°C, {status}"
    except Exception as e:
        return f"Could not get weather information. {e}"

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        jokes = [
            "Why don't scientists trust atoms? Because they make up everything!",
            "What do you get if you cross a cat with a dark horse? Kitty Perry.",
            "Why don't some couples go to the gym? Because some relationships don't work out.",
            "I told my wife she was drawing her eyebrows too high. She looked surprised."
        ]
        return random.choice(jokes)

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if hour < 12:
        speak("Good morning, Sir!")
    elif hour < 18:
        speak("Good afternoon, Sir!")
    else:
        speak("Good evening, Sir!")
    now = datetime.datetime.now()
    speak(f"Today is {now.strftime('%A, %B %d, %Y')}, and the time is {now.strftime('%I:%M %p')}.")

# Function to send an email
def send_email():
    try:
        speak("Who is the recipient?")
        recipient = listen()
        speak("What is the subject?")
        subject = listen()
        speak("What is the message?")
        message_content = listen()

        msg = EmailMessage()
        msg.set_content(message_content)
        msg['Subject'] = subject
        msg['From'] = 'your_email@example.com'  # Replace with your email
        msg['To'] = recipient

        with smtplib.SMTP('smtp.example.com', 587) as server:  # Replace with your SMTP server and port
            server.starttls()
            server.login('your_email@example.com', 'your_password')  # Replace with your login credentials
            server.send_message(msg)

        speak("Email sent.")
    except Exception as e:
        speak(f"Could not send the email. {e}")

# Function to search for a file or application and open it
def search_and_open(query):
    for root, dirs, files in os.walk("C:\\"):  # Adjust the search path as needed
        for name in files:
            if query in name.lower():
                os.startfile(os.path.join(root, name))
                speak(f"Opening {name}")
                return
        for name in dirs:
            if query in name.lower():
                os.startfile(os.path.join(root, name))
                speak(f"Opening {name}")
                return
    speak("Could not find that file or application.")

# Function to search and provide an answer
def search_and_provide_answer(query):
    try:
        # Set up Google Custom Search API
        api_key = "your_api_key_here"
        search_engine_id = "your_engine_id_here"
        search_url = f"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={search_engine_id}&q={query}"

        # Make request to the API
        response = requests.get(search_url)
        data = response.json()

        # Parse the response
        if "items" in data:
            items = data["items"]
            if items:
                # Get the first relevant snippet
                snippet = items[0]["snippet"]
                speak(snippet)
            else:
                speak("No relevant information found.")
        else:
            speak("Error occurred while searching.")
    except Exception as e:
        speak(f"Error occurred while searching. {e}")

# Function to classify sentence as command or question
def classify_sentence(sentence):
    tokens = word_tokenize(sentence)
    words = [word for word in tokens if word.isalnum()]
    stop_words = set(stopwords.words('english'))
    words = [word for word in words if word.lower() not in stop_words]
    tagged_words = nltk.pos_tag(words)
    question_words = ['WDT', 'WP', 'WP$', 'WRB']
    for word, tag in tagged_words:
        if tag in question_words:
            return "question"
    return "command"

def parse_and_execute_command(command):
    # Standardize the command to lower case
    command = command.lower()

    # Lists of phrases to match against
    compliments = ["you are beautiful", "you are smart", "you are awesome", "you're beautiful"]
    thanks = ["thanks", "thank you", "thank"]
    goodbye = ["goodbye", "bye", "exit"]

    classification = classify_sentence(command)
    if classification == "question":
        search_and_provide_answer(command)
        return
    
    if any(compliment in command for compliment in compliments):
        speak("Thank you!")
        return "Thank you!"
    elif any(thank in command for thank in thanks):
        speak("You're welcome.")
        return "You're welcome."
    elif any(exit_command in command for exit_command in goodbye):
        speak("Goodbye and take care, if you need anything feel free to ask!")
        return "Goodbye and take care, if you need anything feel free to ask!"
    elif "what is your name" in command or "who are you" in command:
        speak("I am your personal assistant.")
        return "I am your personal assistant."
    elif "calculate" in command:
        try:
            # Extract the mathematical expression
            expression = command.split("calculate")[1].strip()
            # Evaluate the expression
            result = eval(expression)
            speak(f"The result of {expression} is {result}")
            return f"The result of {expression} is {result}"
        except Exception as e:
            speak(f"Sorry, I couldn't calculate that. {e}")
            return f"Sorry, I couldn't calculate that. {e}"
    elif "open google" in command:
        speak("Opening Google.")
        webbrowser.open("https://www.google.com")
        return "Opening Google."
    elif "open" in command:
        # Get the application name
        application_name = command.split("open")[1].strip()
        search_and_open(application_name)
        return f"Opening {application_name}."
    elif "tell me a joke" in command or "joke" in command:
        joke = fetch_joke()
        speak(joke)
        return joke
    elif "translate" in command:
     try:
        split_command = command.split("translate")[1].strip().split(" to ")
        text_to_translate = split_command[0].strip()
        destination_language = split_command[1].strip()
        translation = translate_text(text_to_translate, destination_language)
        speak(f"The translation of {text_to_translate} to {destination_language} is {translation}")
        return f"The translation of {text_to_translate} to {destination_language} is {translation}"
     except Exception as e:
        speak(f"Translation error: {e}")
        return f"Translation error: {e}"


    elif "weather" in command:
        try:
            city_name = command.split("weather in ")[1].strip()
            weather_info = get_weather(city_name)
            speak(weather_info)
            return weather_info
        except Exception as e:
            speak(f"Could not retrieve weather information. {e}")
            return f"Could not retrieve weather information. {e}"
    elif "send email" in command:
        send_email()
        return "Email sent."
    else:
        speak("I'm sorry, I didn't quite catch that.")
        return "I'm sorry, I didn't quite catch that."

# Tkinter GUI initialization
root = tk.Tk()
root.title("AI Assistant")

# Fonts
font_ndot = ("Verdana", 12)

# Chat area (ScrolledText)
chat_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=60, height=10, font=font_ndot)
chat_area.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

# Animation Canvas
canvas = Canvas(root, width=200, height=200, bg='white')
canvas.grid(row=1, column=1, padx=10, pady=10)

# Cute Blob Image
blob_image = tk.PhotoImage(file='cute_blob.gif')  # Replace with your image file path
canvas.create_image(100, 100, image=blob_image)

# User input area
user_input = Text(root, width=40, height=2, font=font_ndot)
user_input.grid(row=2, column=0, padx=10, pady=10)

# Function to animate based on voice
def animate_with_voice():
    while True:
        command = listen()
        if command:
            response = parse_and_execute_command(command)
            chat_area.insert(tk.END, f"You: {command}\n", "green")
            chat_area.insert(tk.END, f"Assistant: {response}\n", "blue")
            chat_area.see(tk.END)
            user_input.delete(1.0, tk.END)

# Start animation thread
animation_thread = Thread(target=animate_with_voice)
animation_thread.daemon = True  # Ensure the thread ends when the main program ends
animation_thread.start()

# Start the Tkinter main loop
root.mainloop()
