import tkinter as tk
from tkinter import font, messagebox
import speech_recognition as sr
import pyttsx3
import threading
import datetime
import webbrowser
import requests
import time
import random
import os
import smtplib
from email.message import EmailMessage
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from translate import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import pyowm

# Download NLTK resources if not already downloaded
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
nltk.download('stopwords')

# Initialize speech recognition and text-to-speech engines
engine = pyttsx3.init()
recognizer = sr.Recognizer()

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    try:
        with sr.Microphone() as source:
            print("Listening...")
            recognizer.adjust_for_ambient_noise(source)
            audio = recognizer.listen(source)
        command = recognizer.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return None
    except Exception as e:
        speak(f"An error occurred: {e}")
        return None

# Initialize translator
translator = Translator(to_lang='en')

# Function to translate text
def translate_text(text, dest_lang):
    try:
        translation = translator.translate(text, dest_lang)
        return translation
    except Exception as e:
        return f"Translation failed: {e}"

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API with your API key
owm = pyowm.OWM('5a16d7f729e69aced4b2d8745c1d6f6c')  # Replace with your OpenWeatherMap API key

# Function to fetch weather information for a given city
def get_weather(city_name):
    try:
        observation = owm.weather_manager().weather_at_place(city_name)
        weather = observation.weather
        temperature = weather.temperature('celsius')['temp']
        status = weather.detailed_status
        weather_info = f"{city_name}: {temperature}Â°C, {status}"
        return weather_info
    except Exception as e:
        return f"Could not get weather information. Error: {e}"

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        jokes = [
            "Why don't scientists trust atoms? Because they make up everything!",
            "What do you get if you cross a cat with a dark horse? Kitty Perry.",
            "Why don't some couples go to the gym? Because some relationships don't work out.",
            "I told my wife she was drawing her eyebrows too high. She looked surprised."
        ]
        return random.choice(jokes)

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if hour < 12:
        speak("Good morning!")
    elif hour < 18:
        speak("Good afternoon!")
    else:
        speak("Good evening!")
    now = datetime.datetime.now()
    speak(f"Today is {now.strftime('%A, %B %d, %Y')}, and the time is {now.strftime('%I:%M %p')}.")

# Function to send an email
def send_email():
    try:
        speak("Who is the recipient?")
        recipient = listen()
        speak("What is the subject?")
        subject = listen()
        speak("What is the message?")
        message_content = listen()

        msg = EmailMessage()
        msg.set_content(message_content)
        msg['Subject'] = subject
        msg['From'] = 'your_email@example.com'  # Replace with your email
        msg['To'] = recipient

        with smtplib.SMTP('smtp.example.com', 587) as server:  # Replace with your SMTP server and port
            server.starttls()
            server.login('your_email@example.com', 'your_password')  # Replace with your login credentials
            server.send_message(msg)

        speak("Email sent.")
    except Exception as e:
        speak(f"Could not send the email. Error: {e}")

# Function to set a timer
def set_timer(duration_seconds):
    def timer_thread():
        time.sleep(duration_seconds)
        speak("Time's up!")
    thread = threading.Thread(target=timer_thread)
    thread.start()

# Function to set an alarm
def set_alarm(alarm_time):
    def alarm_thread():
        while True:
            current_time = datetime.datetime.now().strftime('%H:%M')
            if current_time == alarm_time:
                speak("It's time!")
                break
            time.sleep(30)  # Check every 30 seconds
    thread = threading.Thread(target=alarm_thread)
    thread.start()

# Function to search and provide an answer using Google Custom Search API
def search_and_provide_answer(query):
    try:
        # Set up Google Custom Search API
        api_key = "AIzaSyAawDA4Jd28VKhDxp2M5SYa8RN9aBZ_ZcA"  # Replace with your API key
        search_engine_id = "d6792a9ede5fa4835"  # Replace with your search engine ID
        search_url = f"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={search_engine_id}&q={query}"

        # Make request to the API
        response = requests.get(search_url)
        data = response.json()

        # Parse the response
        if "items" in data:
            items = data["items"]
            if items:
                # Get the first relevant snippet
                snippet = items[0]["snippet"]
                speak(snippet)
            else:
                speak("No relevant information found.")
        else:
            speak("Error occurred while searching.")
    except Exception as e:
        speak(f"Error occurred while searching. Error: {e}")

# Function to classify sentence as command or question
def classify_sentence(sentence):
    tokens = word_tokenize(sentence)
    words = [word for word in tokens if word.isalnum()]
    stop_words = set(stopwords.words('english'))
    words = [word for word in words if word.lower() not in stop_words]
    tagged_words = nltk.pos_tag(words)
    question_words = ['WDT', 'WP', 'WP$', 'WRB']
    for word, tag in tagged_words:
        if tag in question_words:
            return "question"
    return "command"

# Memory storage dictionary
memory = {}

# Function to remember information
def remember(key, value):
    memory[key] = value
    speak(f"I will remember {key} as {value}.")

# Function to retrieve remembered information
def retrieve_memory(key):
    if key in memory:
        return memory[key]
    else:
        return "I don't remember anything about that."

# Function to parse and execute the user command
def parse_and_execute_command(command):
    # Standardize the command to lower case
    command = command.lower()

    # Lists of phrases to match against
    compliments = ["you are beautiful", "you are smart", "you are awesome", "you're beautiful"]
    thanks = ["thanks", "thank you", "thank"]
    goodbye = ["goodbye", "bye", "exit"]

    classification = classify_sentence(command)
    if classification == "question":
        search_and_provide_answer(command)
        return
    
    if any(compliment in command for compliment in compliments):
        speak("Thank you!")
    elif any(thank in command for thank in thanks):
        speak("You're welcome.")
    elif any(exit_command in command for exit_command in goodbye):
        speak("Goodbye and take care!")
        exit()
    elif "what is your name" in command or "who are you" in command:
        speak("I am your personal assistant.")
    elif "calculate" in command:
        try:
            # Extract the mathematical expression
            expression = command.split("calculate")[1].strip()
            # Evaluate the expression
            result = eval(expression)
            speak(f"The result of {expression} is {result}")
        except Exception as e:
            speak(f"Sorry, I couldn't calculate that. Error: {e}")
        return
    elif "open youtube" in command:
        speak("Opening Youtube.")
        webbrowser.open("https://www.youtube.com")
    elif "open google" in command:
        speak("Opening Google.")
        webbrowser.open("https://www.google.com")
    elif "open spotify" in command:
        speak("Opening Spotify.")
        webbrowser.open("https://open.spotify.com")
    elif "open discord" in command:
        speak("Opening Discord.")
        webbrowser.open("https://discord.com")
    elif "open email" in command or "open gmail" in command:
        speak("Opening Email.")
        webbrowser.open("https://mail.google.com")
    elif "open g drive" in command:
        speak("Opening Google Drive.")
        webbrowser.open("https://drive.google.com")
    elif "open twitter" in command:
        speak("Opening Twitter.")
        webbrowser.open("https://twitter.com")
    elif "open instagram" in command:
        speak("Opening Instagram.")
        webbrowser.open("https://instagram.com")
    elif "tell me a joke" in command:
        joke = fetch_joke()
        speak(joke)
    elif "translate" in command:
        speak("What is the sentence?")
        sentence = listen()
        speak("Which language?")
        dest_lang = listen()
        translated_text = translate_text(sentence, dest_lang)
        speak(translated_text)
    elif "currency rate" in command:
        speak("Base currency?")
        base = listen()
        speak("Target currency?")
        target = listen()
        try:
            rate = currency_converter.get_rate(base.upper(), target.upper())
            speak(f"{base.upper()} to {target.upper()}: {rate}")
        except Exception as e:
            speak(f"Could not get currency rate. Error: {e}")
    elif "bitcoin price" in command:
        try:
            price = btc_converter.get_latest_price('USD')
            speak(f"Bitcoin price: {price} USD")
        except Exception as e:
            speak(f"Could not get Bitcoin price. Error: {e}")
    elif "weather" in command:
        speak("Which city?")
        city_name = listen()
        weather_info = get_weather(city_name)
        speak(weather_info)
    elif "search for" in command or command.endswith('?'):
        if "search for" in command:
            query = command.replace("search for", "").strip()
        else:
            query = command
        search_and_provide_answer(query)
    elif "hi" in command or "hello" in command or "hey" in command:
        speak("Hello! How can I assist you?")
    elif "how are you" in command:
        speak("I'm doing well, thank you!")
    elif "remember" in command:
        try:
            parts = command.split("remember ")[1].split()
            key = parts[0]
            value = " ".join(parts[1:])
            remember(key, value)
        except:
            speak("Could not understand what to remember.")
    elif "recall" in command or "retrieve" in command or "remember" in command:
        try:
            parts = command.split("recall ")[1].split()
            key = parts[0]
            remembered_value = retrieve_memory(key)
            speak(remembered_value)
        except:
            speak("Could not recall that information.")
    else:
        speak("Command not found.")

class PersonalAssistantUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Assistant")
        self.root.geometry("600x600")

        # Create widgets
        self.output_text = tk.Text(root, height=25, width=70)
        self.output_text.pack(pady=20)

        self.input_text = tk.Entry(root, width=50)
        self.input_text.pack()

        self.speak_button = tk.Button(root, text="Speak", command=self.speak_command)
        self.speak_button.pack(pady=10)

        self.enter_button = tk.Button(root, text="Enter", command=self.enter_command)
        self.enter_button.pack(pady=10)

        self.weather_label = tk.Label(root, text="Weather: ")
        self.weather_label.pack()

        self.time_label = tk.Label(root, text="Time: ")
        self.time_label.pack()

        self.date_label = tk.Label(root, text="Date: ")
        self.date_label.pack()

        self.day_label = tk.Label(root, text="Day: ")
        self.day_label.pack()

        self.timer_label = tk.Label(root, text="Set Timer (seconds): ")
        self.timer_label.pack()

        self.timer_entry = tk.Entry(root, width=10)
        self.timer_entry.pack()

        self.timer_button = tk.Button(root, text="Start Timer", command=self.start_timer)
        self.timer_button.pack(pady=10)

        self.alarm_label = tk.Label(root, text="Set Alarm (HH:MM): ")
        self.alarm_label.pack()

        self.alarm_entry = tk.Entry(root, width=10)
        self.alarm_entry.pack()

        self.alarm_button = tk.Button(root, text="Set Alarm", command=self.set_alarm)
        self.alarm_button.pack(pady=10)

        self.help_button = tk.Button(root, text="Help", command=self.open_help)
        self.help_button.pack(pady=10)

        # Update weather, time, date, and day labels
        self.update_weather()
        self.update_datetime()

    def speak_command(self):
        command = listen()
        if command:
            self.output_text.insert(tk.END, f"You said: {command}\n")
            parse_and_execute_command(command)

    def enter_command(self):
        command = self.input_text.get()
        self.output_text.insert(tk.END, f"You entered: {command}\n")
        parse_and_execute_command(command)
        self.input_text.delete(0, tk.END)

    def start_timer(self):
        try:
            duration = int(self.timer_entry.get())
            if duration > 0:
                speak(f"Timer set for {duration} seconds.")
                set_timer(duration)
            else:
                speak("Please enter a valid duration.")
        except ValueError:
            speak("Please enter a valid number for the timer.")

    def set_alarm(self):
        alarm_time = self.alarm_entry.get().strip()
        if self.is_valid_time(alarm_time):
            speak(f"Alarm set for {alarm_time}.")
            set_alarm(alarm_time)
        else:
            speak("Please enter a valid time in HH:MM format.")

    def is_valid_time(self, time_str):
        try:
            datetime.datetime.strptime(time_str, '%H:%M')
            return True
        except ValueError:
            return False

    def update_weather(self):
        city_name = "New York"  # Default city
        try:
            weather_info = get_weather(city_name)
            self.weather_label.config(text=weather_info)
        except Exception as e:
            self.weather_label.config(text=f"Could not get weather: {e}")

    def update_datetime(self):
        now = datetime.datetime.now()
        time_str = now.strftime('%I:%M %p')
        date_str = now.strftime('%A, %B %d, %Y')
        day_str = now.strftime('%A')

        self.time_label.config(text=f"Time: {time_str}")
        self.date_label.config(text=f"Date: {date_str}")
        self.day_label.config(text=f"Day: {day_str}")

        self.root.after(60000, self.update_datetime)  # Update every minute

    def open_help(self):
        webbrowser.open("https://github.com/NightBlobby/N.A.I.N.A")

if __name__ == "__main__":
    root = tk.Tk()
    app = PersonalAssistantUI(root)
    root.mainloop()
