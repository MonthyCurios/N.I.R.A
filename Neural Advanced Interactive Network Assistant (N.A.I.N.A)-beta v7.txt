import datetime
import speech_recognition as sr
import pyttsx3
import wikipedia
import requests
import pygame
import webbrowser
import os
import subprocess
import logging
from googletrans import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import pyowm
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import smtplib
from email.message import EmailMessage
import psutil

# Initialize logging
logging.basicConfig(filename='naina_assistant.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

# Initialize the speech engine
engine = pyttsx3.init()

# Function to set voice to female
def set_female_voice():
    voices = engine.getProperty('voices')
    for voice in voices:
        if 'female' in voice.name.lower():
            engine.setProperty('voice', voice.id)
            break

set_female_voice()

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        logging.info("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        logging.info(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        logging.error("Could not understand the audio")
        speak("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        logging.error("Could not request results; check your network connection")
        speak("Sorry, my speech service is down.")
        return None

# Initialize pygame mixer for music control
pygame.mixer.init()

# Initialize translator
translator = Translator()

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API
owm = pyowm.OWM('your_openweather_api_key')  # Replace with your OpenWeatherMap API key

# Initialize Spotify API (replace with your own client_id and client_secret)
spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(client_id='your_spotify_client_id', client_secret='your_spotify_client_secret'))

# List of predefined jokes
jokes = [
    "Why don't scientists trust atoms? Because they make up everything!",
    "What do you get if you cross a cat with a dark horse? Kitty Perry.",
    "Why don't some couples go to the gym? Because some relationships don't work out.",
    "I told my wife she was drawing her eyebrows too high. She looked surprised."
]

# Function to fetch a joke from an online API
def fetch_joke():
    try:
        response = requests.get("https://official-joke-api.appspot.com/random_joke")
        if response.status_code == 200:
            joke_data = response.json()
            return f"{joke_data['setup']} ... {joke_data['punchline']}"
        else:
            return random.choice(jokes)
    except Exception as e:
        logging.error(f"Error fetching joke: {e}")
        return random.choice(jokes)

# Function to play music from a YouTube URL
def play_music(url):
    try:
        webbrowser.open(url)
        speak("Playing music from YouTube.")
    except Exception as e:
        logging.error(f"Error playing music: {e}")
        speak("Sorry, I couldn't play the music.")

# Function to control music playback
def control_music(action):
    try:
        if action == "pause":
            pygame.mixer.music.pause()
            speak("Music paused.")
        elif action == "resume":
            pygame.mixer.music.unpause()
            speak("Music resumed.")
        elif action == "stop":
            pygame.mixer.music.stop()
            speak("Music stopped.")
        elif action == "next":
            pygame.mixer.music.stop()
            speak("Playing next song.")
        elif action == "previous":
            pygame.mixer.music.stop()
            speak("Playing previous song.")
        else:
            speak("Invalid action.")
    except Exception as e:
        logging.error(f"Error controlling music: {e}")
        speak("Sorry, I couldn't control the music.")

# Function to play a song on Spotify
def play_song_on_spotify(song_name):
    try:
        results = spotify.search(q=song_name, limit=1, type='track')
        if results['tracks']['items']:
            track = results['tracks']['items'][0]
            webbrowser.open(track['external_urls']['spotify'])
            speak(f"Playing {track['name']} by {track['artists'][0]['name']} on Spotify.")
        else:
            speak("Sorry, I couldn't find the song on Spotify.")
    except Exception as e:
        logging.error(f"Error playing song on Spotify: {e}")
        speak("Sorry, I couldn't play the song on Spotify.")

# Function to get phone stock ROM link (placeholder)
def get_stock_rom(phone_model):
    return f"https://www.google.com/search?q={phone_model.replace(' ', '+')}+stock+ROM"

# Function to search and open files or applications
def search_and_open(query):
    search_results = []
    for root, dirs, files in os.walk("C:/"):
        for name in files:
            if query.lower() in name.lower():
                search_results.append(os.path.join(root, name))
        for name in dirs:
            if query.lower() in name.lower():
                search_results.append(os.path.join(root, name))
    if search_results:
        file_to_open = search_results[0]
        os.startfile(file_to_open)
        speak(f"Opening {os.path.basename(file_to_open)}")
    else:
        speak(f"Sorry, I couldn't find any file or application named {query}")

# Function to send email
def send_email(subject, body, to):
    try:
        EMAIL_ADDRESS = 'your_email@gmail.com'
        EMAIL_PASSWORD = 'your_password'

        msg = EmailMessage()
        msg.set_content(body)
        msg['Subject'] = subject
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = to

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            smtp.send_message(msg)
        speak("Email sent successfully.")
    except Exception as e:
        logging.error(f"Error sending email: {e}")
        speak("Sorry, I couldn't send the email.")

# Function to get latest news
def get_latest_news():
    try:
        api_key = 'your_newsapi_api_key'
        url = f'https://newsapi.org/v2/top-headlines?country=us&apiKey={api_key}'
        response = requests.get(url).json()
        headlines = [article['title'] for article in response['articles'][:5]]
        for i, headline in enumerate(headlines, 1):
            speak(f"Headline {i}: {headline}")
    except Exception as e:
        logging.error(f"Error fetching news: {e}")
        speak("Sorry, I couldn't fetch the news.")

# Function to take notes
def take_note():
    try:
        speak("What would you like me to write down?")
        note = listen()
        with open("notes.txt", "a") as file:
            file.write(f"{datetime.datetime.now()} - {note}\n")
        speak("Note taken.")
    except Exception as e:
        logging.error(f"Error taking note: {e}")
        speak("Sorry, I couldn't take the note.")

# Function to set reminders
def set_reminder():
    try:
        speak("What is the reminder?")
        reminder = listen()
        speak("When should I remind you? Please specify in seconds.")
        time_in_seconds = int(listen())
        speak(f"Reminder set for {time_in_seconds} seconds.")
        time.sleep(time_in_seconds)
        speak(f"Reminder: {reminder}")
    except Exception as e:
        logging.error(f"Error setting reminder: {e}")
        speak("Sorry, I couldn't set the reminder.")

# Function to get system status
def get_system_status():
    try:
        battery = psutil.sensors_battery()
        cpu = psutil.cpu_percent(interval=1)
        disk = psutil.disk_usage('/')
        speak(f"Battery is at {battery.percent} percent.")
        speak(f"CPU usage is at {cpu} percent.")
        speak(f"Disk usage is at {disk.percent} percent.")
    except Exception as e:
        logging.error(f"Error getting system status: {e}")
        speak("Sorry, I couldn't get the system status.")

# Function to parse command
def parse_command(command):
    command = command.lower()
    if 'naina' in command:
        if "open" in command:
            return 'open', command.replace('naina open', '').strip()
        elif "play song" in command:
            return 'play_song', command.replace('naina play song', '').strip()
        elif "send email" in command:
            return 'send_email', command
        elif "news" in command:
            return 'news', command
        elif "note" in command:
            return 'note', command
        elif "reminder" in command:
            return 'reminder', command
        elif "system status" in command:
            return 'system_status', command
        elif "stock rom" in command:
            return 'stock_rom', command
        elif "your name" in command or "who are you"