import speech_recognition as sr
import pyttsx3
import wikipedia
import webbrowser
import datetime
import os
import random
import requests
import pygame

# Initialize text-to-speech engine
engine = pyttsx3.init()

# Get all available voices
voices = engine.getProperty('voices')

# Set female voice (assuming it's the first one in the list)
engine.setProperty('voice', voices[0].id)

# Set other properties
engine.setProperty('rate', 150)  # Speed of speech
engine.setProperty('volume', 0.9)  # Volume level (0.0 to 1.0)

# Initialize pygame mixer
pygame.mixer.init()

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("N.A.I.NA is listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        print("N.A.I.NA is recognizing...")
        query = recognizer.recognize_google(audio, language='en-US')
        print(f"You said: {query}")
    except Exception as e:
        print("Sorry, N.A.I.NA didn't catch that.")
        return None
    return query

def speak(text):
    engine.say(text)
    engine.runAndWait()

def wish_me():
    current_time = datetime.datetime.now().strftime("%H:%M")
    if "00:00" <= current_time < "12:00":
        speak("Good morning!")
    elif "12:00" <= current_time < "18:00":
        speak("Good afternoon!")
    else:
        speak("Good evening!")
    speak("I'm N.A.I.NA, your Neural Advanced Interactive Network Assistant. How can I assist you today?")

def search_wikipedia(query):
    speak("Searching Wikipedia...")
    try:
        summary = wikipedia.summary(query, sentences=2)
        speak("According to Wikipedia")
        speak(summary)
    except wikipedia.exceptions.DisambiguationError as e:
        speak("There are multiple matches. Please specify your query.")

def search_online(query):
    url = f"https://www.google.com/search?q={query}"
    speak("Searching online...")
    webbrowser.open(url)

def play_music(query):
    url = f"https://www.youtube.com/results?search_query={query}"
    speak("Playing music...")
    webbrowser.open(url)

def pause_music():
    pygame.mixer.music.pause()
    speak("Music paused.")

def unpause_music():
    pygame.mixer.music.unpause()
    speak("Music resumed.")

def stop_music():
    pygame.mixer.music.stop()
    speak("Music stopped.")

def next_song():
    pygame.mixer.music.stop()  # Stop the current song
    speak("Skipping to the next song.")

def previous_song():
    # Implement logic to play the previous song if available
    speak("Playing the previous song.")

def process_command(command):
    if 'search' in command.lower():
        # Perform Wikipedia search
        search_query = command.replace("search", "").strip()
        search_wikipedia(search_query)
    elif 'hello' in command.lower():
        # Greet the user
        speak("Hello! How can N.A.I.NA assist you?")
    elif 'goodbye' in command.lower():
        # Say goodbye
        speak("Goodbye! Have a nice day!")
        return False
    elif 'play music' in command.lower():
        # Play music from an online source
        query = "YOUR_PLAYLIST_OR_ALBUM_NAME_HERE"  # Replace with the playlist or album you want to play
        play_music(query)
    elif 'pause music' in command.lower():
        # Pause music playback
        pause_music()
    elif 'resume music' in command.lower() or 'unpause music' in command.lower():
        # Resume music playback
        unpause_music()
    elif 'stop music' in command.lower() or 'end music' in command.lower():
        # Stop music playback
        stop_music()
    elif 'next song' in command.lower() or 'skip song' in command.lower():
        # Skip to the next song
        next_song()
    elif 'previous song' in command.lower() or 'play previous' in command.lower():
        # Play the previous song
        previous_song()
    elif 'time' in command.lower():
        # Tell the current time
        current_time = datetime.datetime.now().strftime("%I:%M %p")
        speak(f"The current time is {current_time}")
    else:
        # Search online if no specific command detected
        search_online(command)
    return True

def main():
    wish_me()
    active = True
    while active:
        command = listen()
        if command:
            active = process_command(command)

if __name__ == "__main__":
    main()