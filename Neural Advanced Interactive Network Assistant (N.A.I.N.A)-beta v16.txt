import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import speech_recognition as sr
import pyttsx3
import requests
from translate import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import webbrowser
import pyowm
import os
import datetime
import smtplib
from email.message import EmailMessage
import subprocess
import math

# Download NLTK resources if not already downloaded
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
nltk.download('stopwords')

# Initialize the speech engine
engine = pyttsx3.init()

# Set voice to female
def set_voice():
    voices = engine.getProperty('voices')
    for voice in voices:
        if 'female' in voice.name.lower():
            engine.setProperty('voice', voice.id)
            return
    engine.setProperty('voice', 'english+f1')  # Default female voice
    print("There seems to have been a problem with the voice synthesizer. Default settings have been restored.")

set_voice()

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return None
    except Exception as e:
        speak(f"An error occurred: {e}")
        return None

# Initialize translator
translator = Translator(to_lang='en')

# Function to translate text
def translate_text(text, dest_lang):
    try:
        translation = translator.translate(text, dest=dest_lang)
        return translation
    except Exception as e:
        return f"Translation failed: {e}"

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API with your API key
owm = pyowm.OWM('5a16d7f729e69aced4b2d8745c1d6f6c')  # Replace with your OpenWeatherMap API key

# Function to fetch weather information
def get_weather(city_name):
    try:
        observation = owm.weather_manager().weather_at_place(city_name)
        weather = observation.weather
        temperature = weather.temperature('celsius')['temp']
        status = weather.detailed_status
        return f"{city_name}: {temperature}Â°C, {status}"
    except Exception as e:
        return f"Could not get weather information. {e}"

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        jokes = [
            "Why don't scientists trust atoms? Because they make up everything!",
            "What do you get if you cross a cat with a dark horse? Kitty Perry.",
            "Why don't some couples go to the gym? Because some relationships don't work out.",
            "I told my wife she was drawing her eyebrows too high. She looked surprised."
        ]
        return random.choice(jokes)

# Function to play music from a YouTube URL
def play_music(url):
    webbrowser.open(url)
    speak("Playing music.")

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if hour < 12:
        speak("Good morning, Sir!")
    elif hour < 18:
        speak("Good afternoon, Sir!")
    else:
        speak("Good evening, Sir!")
    now = datetime.datetime.now()
    speak(f"Today is {now.strftime('%A, %B %d, %Y')}, and the time is {now.strftime('%I:%M %p')}.")

# Function to send an email
def send_email():
    try:
        speak("Who is the recipient?")
        recipient = listen()
        speak("What is the subject?")
        subject = listen()
        speak("What is the message?")
        message_content = listen()

        msg = EmailMessage()
        msg.set_content(message_content)
        msg['Subject'] = subject
        msg['From'] = 'reeddplayz@gmail.com'  # Replace with your email
        msg['To'] = recipient

        with smtplib.SMTP('smtp.example.com', 587) as server:  # Replace with your SMTP server and port
            server.starttls()
            server.login('your_email@example.com', 'your_password')  # Replace with your login credentials
            server.send_message(msg)

        speak("Email sent.")
    except Exception as e:
        speak(f"Could not send the email. {e}")

# Function to search and provide an answer
def search_and_provide_answer(query):
    try:
        # Set up Google Custom Search API
        api_key = "AIzaSyAawDA4Jd28VKhDxp2M5SYa8RN9aBZ_ZcA"
        search_engine_id = "d6792a9ede5fa4835"
        search_url = f"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={search_engine_id}&q={query}"

        # Make request to the API
        response = requests.get(search_url)
        data = response.json()

        # Parse the response
        if "items" in data:
            items = data["items"]
            if items:
                # Get the first relevant snippet
                snippet = items[0]["snippet"]
                speak(snippet)
            else:
                speak("No relevant information found.")
        else:
            speak("Error occurred while searching.")
    except Exception as e:
        speak(f"Error occurred while searching. {e}")

# Function to classify sentence as command or question
def classify_sentence(sentence):
    tokens = word_tokenize(sentence)
    words = [word for word in tokens if word.isalnum()]
    stop_words = set(stopwords.words('english'))
    words = [word for word in words if word.lower() not in stop_words]
    tagged_words = nltk.pos_tag(words)
    question_words = ['WDT', 'WP', 'WP$', 'WRB']
    for word, tag in tagged_words:
        if tag in question_words:
            return "question"
    return "command"

# Memory storage dictionary
memory = {}

def remember(key, value):
    memory[key] = value
    speak(f"I will remember {key} as {value}.")

def retrieve_memory(key):
    if key in memory:
        return memory[key]
    else:
        return "I don't remember anything about that."

def parse_and_execute_command(command):
    # Standardize the command to lower case
    command = command.lower()

    # Lists of phrases to match against
    compliments = ["you are beautiful", "you are smart", "you are awesome", "you're beautiful"]
    thanks = ["thanks", "thank you", "thank"]
    goodbye = ["goodbye", "bye", "exit"]

    classification = classify_sentence(command)
    if classification == "question":
        search_and_provide_answer(command)
        return
    
    if any(compliment in command for compliment in compliments):
        speak("Thank you!")
    elif any(thank in command for thank in thanks):
        speak("You're welcome.")
    elif any(exit_command in command for exit_command in goodbye):
        speak("Goodbye and take care, if you need anything feel free to ask!")
        exit()
    elif "what is your name" in command or "who are you" in command:
        speak("I am your personal assistant.")
    elif "calculate" in command:
        try:
            # Extract the mathematical expression
            expression = command.split("calculate")[1].strip()
            # Evaluate the expression
            result = eval(expression)
            speak(f"The result of {expression} is {result}")
        except Exception as e:
            speak(f"Sorry, I couldn't calculate that. {e}")
        return
    elif "open youtube" in command:
        speak("Opening Youtube.")
        webbrowser.open("https://www.youtube.com")
    elif "open google" in command:
        speak("Opening Google.")
        webbrowser.open("https://www.google.com")
    elif "open spotify" in command:
        speak("Opening Spotify.")
        webbrowser.open("https://open.spotify.com")
    elif "open discord" in command:
        speak("Opening Discord.")
        webbrowser.open("https://discord.com")
    elif "open email" in command or "open gmail" in command:
        speak("Opening Email.")
        webbrowser.open("https://mail.google.com")
    elif "open g drive" in command:
        speak("Opening Google Drive.")
        webbrowser.open("https://drive.google.com")
    elif "open twitter" in command or "open x" in command:
        speak("Opening Twitter.")
        webbrowser.open("https://twitter.com")
    elif "open instagram" in command or "open insta" in command:
        speak("Opening Instagram.")
        webbrowser.open("https://instagram.com")
    elif "tell me a joke" in command:
        joke = fetch_joke()
        speak(joke)
    elif "translate" in command:
        speak("What is the sentence?")
        sentence = listen()
        speak("Which language?")
        dest_lang = listen()
        translated_text = translate_text(sentence, dest_lang)
        speak(translated_text)
    elif "currency rate" in command:
        speak("Base currency?")
        base = listen()
        speak("Target currency?")
        target = listen()
        try:
            rate = currency_converter.get_rate(base.upper(), target.upper())
            speak(f"{base.upper()} to {target.upper()}: {rate}")
        except Exception as e:
            speak(f"Could not get currency rate. {e}")
    elif "bitcoin price" in command:
        try:
            price = btc_converter.get_latest_price('USD')
            speak(f"Bitcoin price: {price} USD")
        except Exception as e:
            speak(f"Could not get Bitcoin price. {e}")
    elif "weather" in command:
        speak("Which city?")
        city_name = listen()
        weather_info = get_weather(city_name)
        speak(weather_info)
    elif "search for" in command or command.endswith('?'):
        if "search for" in command:
            query = command.replace("search for", "").strip()
        else:
            query = command
        search_and_provide_answer(query)
    elif "hi" in command:
        speak("hi, how may i help you?")
    elif "hello" in command:
        speak("hi, how may i help you?")
    elif "hey" in command:
        speak("hi, how may i help you?")
    elif any(exit_command in command for exit_command in goodbye):
        speak("Goodbye and take care, if you need anything feel free to ask!")
        exit()
    elif "how are you" in command:
        speak("im doing great. Hope your doing great too!")
    elif "remember" in command:
        try:
            parts = command.split("remember ")[1].split()
            key = parts[0]
            value = " ".join(parts[1:])
            remember(key, value)
        except:
            speak("Could not understand what to remember.")
    elif "recall" in command or "retrieve" in command or "remember" in command:
        try:
            parts = command.split("recall ")[1].split()
            key = parts[0]
            remembered_value = retrieve_memory(key)
            speak(remembered_value)
        except:
            speak("Could not recall that information.")
    else:
        speak("Command not found.")

# Greet the user
greet_user()

# Main loop to listen for commands
while True:
    command = listen()
    if command:
        parse_and_execute_command(command)

