import speech_recognition as sr
import pyttsx3
import wikipedia
import requests
import webbrowser
from googletrans import Translator
from forex_python.converter import CurrencyRates
from forex_python.bitcoin import BtcConverter
import random
import pyowm
import smtplib
import datetime
import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# Initialize the speech engine
engine = pyttsx3.init()

# Set voice to female
voices = engine.getProperty('voices')
for voice in voices:
    if 'female' in voice.name.lower():
        engine.setProperty('voice', voice.id)
        break

# Function to speak
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to listen to the user's command
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print(f"You said: {command}")
        return command.lower()
    except sr.UnknownValueError:
        print("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        print("Sorry, my speech service is down.")
        return None

# Initialize translator
translator = Translator()

# Initialize currency converter
currency_converter = CurrencyRates()
btc_converter = BtcConverter()

# Initialize weather API
owm = pyowm.OWM('your_openweather_api_key')  # Replace with your OpenWeatherMap API key

# Initialize Spotify
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id='your_spotify_client_id', client_secret='your_spotify_client_secret'))  # Replace with your Spotify API credentials

# List of predefined jokes
jokes = [
    "Why don't scientists trust atoms? Because they make up everything!",
    "What do you get if you cross a cat with a dark horse? Kitty Perry.",
    "Why don't some couples go to the gym? Because some relationships don't work out.",
    "I told my wife she was drawing her eyebrows too high. She looked surprised."
]

# Function to fetch a joke from an online API
def fetch_joke():
    response = requests.get("https://official-joke-api.appspot.com/random_joke")
    if response.status_code == 200:
        joke_data = response.json()
        return f"{joke_data['setup']} ... {joke_data['punchline']}"
    else:
        return random.choice(jokes)

# Function to play music from a YouTube URL
def play_music(url):
    webbrowser.open(url)
    speak("Playing music from YouTube.")

# Function to play song on Spotify
def play_song_on_spotify(song_name):
    results = sp.search(q=song_name, limit=1)
    if results['tracks']['items']:
        track = results['tracks']['items'][0]
        webbrowser.open(track['external_urls']['spotify'])
        speak(f"Playing {track['name']} by {track['artists'][0]['name']} on Spotify.")
    else:
        speak("Sorry, I couldn't find the song on Spotify.")

# Function to search and open a file or application
def search_and_open(query):
    for root, dirs, files in os.walk("/"):
        for name in files:
            if query in name:
                file_path = os.path.join(root, name)
                os.startfile(file_path)
                speak(f"Opening {name}.")
                return
        for name in dirs:
            if query in name:
                dir_path = os.path.join(root, name)
                os.startfile(dir_path)
                speak(f"Opening {name}.")
                return
    speak("Sorry, I couldn't find the file or application.")

# Function to get stock ROM link for a phone model
def get_stock_rom(phone_model):
    webbrowser.open(f"https://www.google.com/search?q={phone_model} stock ROM download")
    speak(f"Searching for stock ROM for {phone_model}.")

# Function to send an email
def send_email(subject, body, to):
    from_email = "your_email@gmail.com"
    password = "your_password"
    
    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(from_email, password)
            message = f"Subject: {subject}\n\n{body}"
            server.sendmail(from_email, to, message)
        speak("Email sent successfully.")
    except Exception as e:
        speak(f"Failed to send email. Error: {str(e)}")

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if 0 <= hour < 12:
        speak("Good morning!")
    elif 12 <= hour < 18:
        speak("Good afternoon!")
    else:
        speak("Good evening!")
    speak(f"Today is {datetime.datetime.now().strftime('%A')}, {datetime.datetime.now().strftime('%B %d, %Y')}. The time is {datetime.datetime.now().strftime('%I:%M %p')}.")

# Function to parse command
def parse_command(command):
    command = command.lower()
    if 'naina' in command:
        if "open" in command:
            return 'open', command.replace('naina open', '').strip()
        elif "play song" in command:
            return 'play_song', command.replace('naina play song', '').strip()
        elif "send email" in command:
            return 'send_email', command
        elif "news" in command:
            return 'news', command
        elif "note" in command:
            return 'note', command
        elif "reminder" in command:
            return 'reminder', command
        elif "system status" in command:
            return 'system_status', command
        elif "stock rom" in command:
            return 'stock_rom', command
        elif "your name" in command or "who are you" in command:
            return 'name', command
        elif "creator" in command or "created you" in command:
            return 'creator', command
        elif "joke" in command:
            return 'joke', command
        elif "translate" in command:
            return 'translate', command
        elif "currency" in command:
            return 'currency', command
        elif "bitcoin" in command:
            return 'bitcoin', command
        elif "weather" in command:
            return 'weather', command
        elif "search" in command:
            return 'search', command
        elif "play music" in command:
            return 'play_music', command
        else:
            return None, None
    else:
        return None, None

# Function to parse and execute the command
def parse_and_execute_command(command):
    action, value = parse_command(command)
    if action == 'open':
        search_and_open(value)
    elif action == 'play_song':
        play_song_on_spotify(value)
    elif action == 'send_email':
        speak("What is the subject?")
        subject = listen()
        speak("What is the body?")
        body = listen()
        speak("Who should I send it to?")
        to = listen()
        send_email(subject, body, to)
    elif action == 'news':
        get_latest_news()
    elif action == 'note':
        take_note()
    elif action == 'reminder':
        set_reminder()
    elif action == 'system_status':
        get_system_status()
    elif action == 'stock_rom':
        phone_model = value.replace('naina', '').strip()
        get_stock_rom(phone_model)
    elif action == 'name':
        speak("My name is Naina.")
    elif action == 'creator':
        speak("Priyanshu created me.")
    elif action == 'joke':
        speak(fetch_joke())
    elif action == 'translate':
        speak("What would you like me to translate?")
        text = listen()
        translated = translator.translate(text, dest='en')
        speak(f"The translation is: {translated.text}")
    elif action == 'currency':
        speak("Which currency would you like to convert from?")
        from_currency = listen().upper()
        speak("Which currency would you like to convert to?")
        to_currency = listen().upper()
        speak("How much would you like to convert?")
        amount = float(listen())
        converted_amount = currency_converter.convert(from_currency, to_currency, amount)
        speak(f"{amount} {from_currency} is {converted_amount} {to_currency}")
    elif action == 'bitcoin':
        speak("How much Bitcoin would you like to convert to USD?")
        btc_amount = float(listen())
        usd_amount = btc_converter.get_latest_price('USD') * btc_amount
        speak(f"{btc_amount} Bitcoin is {usd_amount} USD")
    elif action == 'weather':
        speak("Which city?")
        city = listen()
        observation = owm.weather_manager().weather_at_place(city)
        weather = observation.weather
        speak(f"The weather in {city} is {weather.detailed_status} with a temperature of {weather.temperature('celsius')['temp']} degrees Celsius.")
    elif action == 'search':
        speak("What do you want to search for?")
        query = listen()
        webbrowser.open(f"https://www.google.com/search?q={query}")
        speak(f"Searching for {query} on Google.")
    elif action == 'play_music':
        speak("Please provide the URL of the music.")
        url = listen()
        play_music(url)
    else:
        speak("Sorry, I didn't understand that command.")

# Main function to run the assistant
def run_assistant():
    greet_user()
    while True:
        command = listen()
        if command:
            parse_and_execute_command(command)
        if "exit" in command or "bye" in command or "quit" in command:
            speak("Goodbye!")
            break

if __name__ == "__main__":
    run_assistant()